# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'saprmax3.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from functions import generateReactionsMatrix, generateReactionsGlobalVector, generateDeltas, solveN, solveU
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import pickle   
import sys
from models import kernel, concentrated, running, material
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWidget, QApplication, QFileDialog
from PyQt5.QtGui import QPainter, QColor, QPen
from PyQt5.QtCore import Qt

class MyGraphicsView(QWidget):

    def __init__(self, parent=None):
        QWidget.__init__(self, parent)
        self.left_sealing = False
        self.right_sealing = False
        self.scale_x = 1
        self.scale_y = 1
        self.indent = (0, 0)

    def paintEvent(self, e):

        qp = QPainter()
        qp.begin(self)
        self.drawSealings(qp)
        self.drawKernels(qp)
        self.drawRunning(qp)
        self.drawConcentrated(qp)
        #self.drawTorsion(qp)
        qp.end()


    def drawKernels(self, qp):
        print('sealings ', self.left_sealing, self.right_sealing)

        pen = QPen(Qt.black, 2, Qt.SolidLine)

        qp.setPen(pen)
        scale_x = self.scale_x
        scale_y = self.scale_y
        length = 40
        for kern in kernel.objects:
            print(kern)
            if kern != None:
                point1_x = length
                point1_y = 195 + (kern.area/2)*scale_y
                point2_x = length
                point2_y = 195 - (kern.area/2)*scale_y
                point3_x = length + (kern.length*scale_x)
                point3_y = point2_y = 195 - (kern.area/2)*scale_y
                point4_x = length + (kern.length*scale_x)
                point4_y = point1_y = 195 + (kern.area/2)*scale_y
                qp.drawLine(point1_x, point1_y, point2_x, point2_y)
                qp.drawLine(point2_x, point2_y, point3_x, point3_y)
                qp.drawLine(point3_x, point3_y, point4_x, point4_y)
                qp.drawLine(point4_x, point4_y, point1_x, point1_y)
                length += kern.length*scale_x


    def drawSealings(self, qp):
        if self.left_sealing == True:
            pen = QPen(Qt.black, 2, Qt.SolidLine)
            qp.setPen(pen)
            qp.drawLine(40, 0, 40, 394)
            pen = QPen(Qt.black, 1, Qt.SolidLine)
            qp.setPen(pen)
            y = 5
            for i in range(20):
                qp.drawLine(40, y, 0, y+20)
                y += 20
        if self.right_sealing == True:
            pen = QPen(Qt.black, 2, Qt.SolidLine)
            qp.setPen(pen)
            qp.drawLine(710, 0, 710, 394)
            pen = QPen(Qt.black, 1, Qt.SolidLine)
            qp.setPen(pen)
            y = 5
            for i in range(20):
                qp.drawLine(710, y, 750, y+20)
                y += 20




    def drawConcentrated(self, qp):
        pen = QPen(Qt.red, 3, Qt.SolidLine)
        qp.setPen(pen)
        scale_x = self.scale_x
        for power in concentrated.objects:
            length = 40
            if power.point == 0:
                length = 40
            else:
                counter = 0
                kern_count = 0
                while kern_count != power.point-1 and counter != len(kernel.objects):
                    if kernel.objects[counter] != None:
                        length += kernel.objects[counter].length*scale_x
                        kern_count += 1
                        counter += 1
            pen = QPen(Qt.red, 7, Qt.SolidLine)
            qp.setPen(pen)
            if power.power > 0:
                qp.drawLine(length,195, length+35, 195)
                qp.drawLine(length+35, 195, length+25, 203)
                qp.drawLine(length+35, 195, length+25, 187)
            if power.power < 0:
                qp.drawLine(length, 195, length-35, 195)
                qp.drawLine(length-35, 195, length-25, 203)
                qp.drawLine(length-35, 195, length-25, 187)

            

    def drawRunning(self, qp):
        pen = QPen(Qt.green, 2, Qt.SolidLine)

        qp.setPen(pen)
        scale_x = self.scale_x
        scale_y = self.scale_y
        arrow_length = 30
        arrow_streak_x_margin = arrow_length*(6/20)
        arrow_streak_y_margin = arrow_length*(3/20)
        for power in running.objects:
            length = 40
            counter = 0
            kern_count = 0
            while kern_count != power.kernel-1 and counter != len(kernel.objects):
                if kernel.objects[counter] != None:
                    length += kernel.objects[counter].length*scale_x
                    kern_count += 1
                    counter += 1
            power_length = kernel.objects[counter].length*scale_x
            arrow_count = int(power_length//arrow_length + 1)
            arrows_scale = power_length/(arrow_count*arrow_length)
            length_of_arrow_seq = length
            for i in range(arrow_count):
                if power.power > 0:
                    qp.drawLine(length_of_arrow_seq, 195, length_of_arrow_seq+arrow_length*arrows_scale, 195)
                    qp.drawLine(length_of_arrow_seq+arrow_length*arrows_scale, 195,
                                length_of_arrow_seq+arrow_length*arrows_scale-arrow_streak_x_margin*arrows_scale,
                                195-arrow_streak_y_margin*arrows_scale)
                    qp.drawLine(length_of_arrow_seq+arrow_length*arrows_scale, 195,
                                length_of_arrow_seq+arrow_length*arrows_scale-arrow_streak_x_margin*arrows_scale,
                                195+arrow_streak_y_margin*arrows_scale)
                elif power.power < 0:
                    qp.drawLine(length_of_arrow_seq, 195, length_of_arrow_seq+arrow_length*arrows_scale, 195)
                    qp.drawLine(length_of_arrow_seq, 195,
                                length_of_arrow_seq+arrow_streak_x_margin*arrows_scale,
                                195-arrow_streak_y_margin*arrows_scale)
                    qp.drawLine(length_of_arrow_seq, 195,
                                length_of_arrow_seq+arrow_streak_x_margin*arrows_scale,
                                195+arrow_streak_y_margin*arrows_scale)
                length_of_arrow_seq += arrow_length*arrows_scale

    def drawTorsion(self, qp):
        
        pen = QPen(Qt.blue, 3, Qt.SolidLine)

        qp.setPen(pen)
        for power in concentrated.objects:
            scale = self.scale
            indent = self.indent
            if power.torsion > 0:
                 qp.drawLine( ((power.point.x-indent[0])*scale+40), 
                               (power.point.y-indent[1])*scale+40, 
                               (power.point.x-indent[0])*scale+80,
                               (power.point.y-indent[1])*scale+20)
                 qp.drawLine( ((power.point.x-indent[0])*scale+80), 
                               (power.point.y-indent[1])*scale+20, 
                               (power.point.x-indent[0])*scale+70,
                               (power.point.y-indent[1])*scale+10)
                 qp.drawLine( ((power.point.x-indent[0])*scale+70), 
                               (power.point.y-indent[1])*scale+9, 
                               (power.point.x-indent[0])*scale+50,
                               (power.point.y-indent[1])*scale+9)
                 qp.drawLine( ((power.point.x-indent[0])*scale+50), 
                               (power.point.y-indent[1])*scale+9, 
                               (power.point.x-indent[0])*scale+40,
                               (power.point.y-indent[1])*scale+30)
                 qp.drawLine( ((power.point.x-indent[0])*scale+40), 
                               (power.point.y-indent[1])*scale+30, 
                               (power.point.x-indent[0])*scale+40,
                               (power.point.y-indent[1])*scale+20)
                 qp.drawLine( ((power.point.x-indent[0])*scale+40), 
                               (power.point.y-indent[1])*scale+30, 
                               (power.point.x-indent[0])*scale+48,
                               (power.point.y-indent[1])*scale+24)

            if power.torsion < 0:
                qp.drawLine( ((power.point.x-indent[0])*scale+40),
                               (power.point.y-indent[1])*scale+40, 
                               (power.point.x-indent[0])*scale,
                               (power.point.y-indent[1])*scale+20)
                qp.drawLine( ((power.point.x-indent[0])*scale),
                               (power.point.y-indent[1])*scale+20, 
                               (power.point.x-indent[0])*scale+10,
                               (power.point.y-indent[1])*scale+10)
                qp.drawLine( ((power.point.x-indent[0])*scale+10),
                               (power.point.y-indent[1])*scale+9, 
                               (power.point.x-indent[0])*scale+30,
                               (power.point.y-indent[1])*scale+9)
                qp.drawLine( ((power.point.x-indent[0])*scale+30),
                               (power.point.y-indent[1])*scale+9, 
                               (power.point.x-indent[0])*scale+40,
                               (power.point.y-indent[1])*scale+30)
                qp.drawLine( ((power.point.x-indent[0])*scale+40),
                               (power.point.y-indent[1])*scale+30, 
                               (power.point.x-indent[0])*scale+40,
                               (power.point.y-indent[1])*scale+20)
                qp.drawLine( ((power.point.x-indent[0])*scale+40),
                               (power.point.y-indent[1])*scale+30, 
                               (power.point.x-indent[0])*scale+32,
                               (power.point.y-indent[1])*scale+24)



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1426, 825)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.scroll_point = QtWidgets.QScrollArea(self.frame)
        self.scroll_point.setGeometry(QtCore.QRect(20, 50, 161, 231))
        self.scroll_point.setWidgetResizable(True)
        self.scroll_point.setObjectName("scroll_point")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 159, 229))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.formLayout = QtWidgets.QFormLayout(self.scrollAreaWidgetContents)
        self.formLayout.setObjectName("formLayout")
        self.lineEdit_X = QtWidgets.QLineEdit(self.scrollAreaWidgetContents)
        self.lineEdit_X.setObjectName("lineEdit_X")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.lineEdit_X)
        self.lineEdit_Y = QtWidgets.QLineEdit(self.scrollAreaWidgetContents)
        self.lineEdit_Y.setObjectName("lineEdit_Y")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.lineEdit_Y)
        self.lineEdit_material = QtWidgets.QLineEdit(self.scrollAreaWidgetContents)
        self.lineEdit_material.setObjectName("lineEdit_material")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.lineEdit_material)
        self.label_X = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_X.setObjectName("label_X")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_X)
        self.label_Y = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_Y.setObjectName("label_Y")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_Y)
        self.label_material = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_material.setObjectName("label_material")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.label_material)
        self.label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label.setStyleSheet("color:rgb(144, 144, 144)")
        self.label.setObjectName("label")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label)
        self.scroll_point.setWidget(self.scrollAreaWidgetContents)
        self.btn_add_point = QtWidgets.QPushButton(self.frame)
        self.btn_add_point.setGeometry(QtCore.QRect(20, 290, 93, 28))
        self.btn_add_point.setObjectName("btn_add_point")
        self.graphicsView = MyGraphicsView(self.frame)
        self.graphicsView.setGeometry(QtCore.QRect(20, 330, 781, 411))
        self.graphicsView.setObjectName("graphicsView")
        self.pushButton_render = QtWidgets.QPushButton(self.frame)
        self.pushButton_render.setGeometry(QtCore.QRect(810, 657, 141, 81))
        self.pushButton_render.setObjectName("pushButton_render")
        self.pushButton_graph_prod = QtWidgets.QPushButton(self.frame)
        self.pushButton_graph_prod.setGeometry(QtCore.QRect(810, 620, 141, 28))
        self.pushButton_graph_prod.setObjectName("pushButton_graph_prod")
        self.pushButton_graph_norm = QtWidgets.QPushButton(self.frame)
        self.pushButton_graph_norm.setGeometry(QtCore.QRect(810, 580, 141, 28))
        self.pushButton_graph_norm.setObjectName("pushButton_graph_norm")
        self.pushButton_graph_peremesh = QtWidgets.QPushButton(self.frame)
        self.pushButton_graph_peremesh.setGeometry(QtCore.QRect(810, 540, 141, 28))
        self.pushButton_graph_peremesh.setObjectName("pushButton_graph_peremesh")
        self.pushButton_table_peremesh = QtWidgets.QPushButton(self.frame)
        self.pushButton_table_peremesh.setGeometry(QtCore.QRect(810, 420, 141, 28))
        self.pushButton_table_peremesh.setObjectName("pushButton_table_peremesh")
        self.pushButton_table_prod = QtWidgets.QPushButton(self.frame)
        self.pushButton_table_prod.setGeometry(QtCore.QRect(810, 500, 141, 28))
        self.pushButton_table_prod.setObjectName("pushButton_table_prod")
        self.pushButton_table_norm = QtWidgets.QPushButton(self.frame)
        self.pushButton_table_norm.setGeometry(QtCore.QRect(810, 460, 141, 28))
        self.pushButton_table_norm.setObjectName("pushButton_table_norm")
        #self.btn_add_kernel = QtWidgets.QPushButton(self.frame)
        #self.btn_add_kernel.setGeometry(QtCore.QRect(180, 290, 93, 28))
        #self.btn_add_kernel.setObjectName("btn_add_kernel")
        self.btn_add_type = QtWidgets.QPushButton(self.frame)
        self.btn_add_type.setGeometry(QtCore.QRect(340, 290, 93, 28))
        self.btn_add_type.setObjectName("btn_add_type")
        self.btn_add_sealing = QtWidgets.QPushButton(self.frame)
        self.btn_add_sealing.setGeometry(QtCore.QRect(500, 290, 93, 28))
        self.btn_add_sealing.setObjectName("btn_add_sealing")
        self.btn_add_running = QtWidgets.QPushButton(self.frame)
        self.btn_add_running.setGeometry(QtCore.QRect(660, 290, 93, 28))
        self.btn_add_running.setObjectName("btn_add_running")
        #self.btn_add_concentrated = QtWidgets.QPushButton(self.frame)
        #self.btn_add_concentrated.setGeometry(QtCore.QRect(820, 290, 93, 28))
        #self.btn_add_concentrated.setObjectName("btn_add_concentrated")
        self.scroll_kernel = QtWidgets.QScrollArea(self.frame)
        self.scroll_kernel.setGeometry(QtCore.QRect(180, 50, 161, 231))
        self.scroll_kernel.setWidgetResizable(True)
        self.scroll_kernel.setObjectName("scroll_kernel")
        self.scrollAreaWidgetContents_12 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_12.setGeometry(QtCore.QRect(0, 0, 159, 229))
        self.scrollAreaWidgetContents_12.setObjectName("scrollAreaWidgetContents_12")
        self.formLayout_4 = QtWidgets.QFormLayout(self.scrollAreaWidgetContents_12)
        self.formLayout_4.setObjectName("formLayout_4")
        self.label_left_sealing = QtWidgets.QLabel(self.scrollAreaWidgetContents_12)
        self.label_left_sealing.setObjectName("label_left_sealing")
        self.label_right_sealing = QtWidgets.QLabel(self.scrollAreaWidgetContents_12)
        #self.label_right_sealing.setObjectName("label_right_sealing")
        self.formLayout_4.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_left_sealing)
        self.formLayout_4.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_right_sealing)
        self.lineEdit_type = QtWidgets.QCheckBox(self.scrollAreaWidgetContents_12)
        #self.lineEdit_type.setObjectName("lineEdit_type")
        self.lineEdit_X_3 = QtWidgets.QCheckBox(self.scrollAreaWidgetContents_12)
        #self.lineEdit_X_3.setObjectName("lineEdit_X_3")
        self.formLayout_4.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.lineEdit_type)
        self.formLayout_4.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.lineEdit_X_3)
        #self.label_Y_3 = QtWidgets.QLabel(self.scrollAreaWidgetContents_12)
        #self.label_Y_3.setObjectName("label_Y_3")
        #self.formLayout_4.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.label_Y_3)
        #self.lineEdit_Y_3 = QtWidgets.QLineEdit(self.scrollAreaWidgetContents_12)
        #self.lineEdit_Y_3.setObjectName("lineEdit_Y_3")
        #self.formLayout_4.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.lineEdit_Y_3)
        self.label_2 = QtWidgets.QLabel(self.scrollAreaWidgetContents_12)
        self.label_2.setStyleSheet("color:rgb(144, 144, 144)")
        self.label_2.setObjectName("label_2")
        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_2)
        self.scroll_kernel.setWidget(self.scrollAreaWidgetContents_12)
        self.scroll_type = QtWidgets.QScrollArea(self.frame)
        self.scroll_type.setGeometry(QtCore.QRect(340, 50, 161, 231))
        self.scroll_type.setWidgetResizable(True)
        self.scroll_type.setObjectName("scroll_type")
        self.scrollAreaWidgetContents_13 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_13.setGeometry(QtCore.QRect(0, 0, 159, 229))
        self.scrollAreaWidgetContents_13.setObjectName("scrollAreaWidgetContents_13")
        self.formLayout_5 = QtWidgets.QFormLayout(self.scrollAreaWidgetContents_13)
        self.formLayout_5.setObjectName("formLayout_5")
        #self.label_X_4 = QtWidgets.QLabel(self.scrollAreaWidgetContents_13)
        #self.label_X_4.setObjectName("label_X_4")
        #self.formLayout_5.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_X_4)
        #self.lineEdit_X_4 = QtWidgets.QLineEdit(self.scrollAreaWidgetContents_13)
        #self.lineEdit_X_4.setObjectName("lineEdit_X_4")
        #self.formLayout_5.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.lineEdit_X_4)
        self.label_Y_4 = QtWidgets.QLabel(self.scrollAreaWidgetContents_13)
        self.label_Y_4.setObjectName("label_Y_4")
        self.formLayout_5.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_Y_4)
        self.lineEdit_Y_4 = QtWidgets.QLineEdit(self.scrollAreaWidgetContents_13)
        self.lineEdit_Y_4.setObjectName("lineEdit_Y_4")
        self.formLayout_5.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.lineEdit_Y_4)
        self.label_5 = QtWidgets.QLabel(self.scrollAreaWidgetContents_13)
        self.label_5.setStyleSheet("color:rgb(144, 144, 144)")
        self.label_5.setObjectName("label_5")
        self.formLayout_5.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_5)
        self.lineEdit = QtWidgets.QLineEdit(self.scrollAreaWidgetContents_13)
        self.lineEdit.setObjectName("lineEdit")
        self.formLayout_5.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.lineEdit)
        self.label_9 = QtWidgets.QLabel(self.scrollAreaWidgetContents_13)
        self.label_9.setObjectName("label_9")
        self.formLayout_5.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_9)
        self.scroll_type.setWidget(self.scrollAreaWidgetContents_13)
        self.scroll_sealing = QtWidgets.QScrollArea(self.frame)
        self.scroll_sealing.setGeometry(QtCore.QRect(500, 50, 161, 231))
        self.scroll_sealing.setWidgetResizable(True)
        self.scroll_sealing.setObjectName("scroll_sealing")
        self.scrollAreaWidgetContents_14 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_14.setGeometry(QtCore.QRect(0, 0, 159, 229))
        self.scrollAreaWidgetContents_14.setObjectName("scrollAreaWidgetContents_14")
        self.formLayout_6 = QtWidgets.QFormLayout(self.scrollAreaWidgetContents_14)
        self.formLayout_6.setObjectName("formLayout_6")
        self.label_kern = QtWidgets.QLabel(self.scrollAreaWidgetContents_14)
        self.label_kern.setObjectName("label_kern")
        self.formLayout_6.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_kern)
        self.lineEdit_kern = QtWidgets.QLineEdit(self.scrollAreaWidgetContents_14)
        self.lineEdit_kern.setObjectName("lineEdit_kern")
        self.formLayout_6.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.lineEdit_kern)
        self.label_power = QtWidgets.QLabel(self.scrollAreaWidgetContents_14)
        self.label_power.setObjectName("label_power")
        self.formLayout_6.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_power)
        self.lineEdit_power = QtWidgets.QLineEdit(self.scrollAreaWidgetContents_14)
        self.lineEdit_power.setObjectName("lineEdit_power")
        self.formLayout_6.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.lineEdit_power)
        self.label_6 = QtWidgets.QLabel(self.scrollAreaWidgetContents_14)
        self.label_6.setStyleSheet("color:rgb(144, 144, 144)")
        self.label_6.setObjectName("label_6")
        self.formLayout_6.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_6)
        self.scroll_sealing.setWidget(self.scrollAreaWidgetContents_14)
        self.scroll_running = QtWidgets.QScrollArea(self.frame)
        self.scroll_running.setGeometry(QtCore.QRect(660, 50, 161, 231))
        self.scroll_running.setWidgetResizable(True)
        self.scroll_running.setObjectName("scroll_running")
        self.scrollAreaWidgetContents_15 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_15.setGeometry(QtCore.QRect(0, 0, 159, 229))
        self.scrollAreaWidgetContents_15.setObjectName("scrollAreaWidgetContents_15")
        self.formLayout_7 = QtWidgets.QFormLayout(self.scrollAreaWidgetContents_15)
        self.formLayout_7.setObjectName("formLayout_7")
        self.label_7 = QtWidgets.QLabel(self.scrollAreaWidgetContents_15)
        self.label_7.setStyleSheet("color:rgb(144, 144, 144)")
        self.label_7.setObjectName("label_7")
        self.formLayout_7.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_7)
        self.label_sterzhen = QtWidgets.QLabel(self.scrollAreaWidgetContents_15)
        self.label_sterzhen.setObjectName("label_sterzhen")
        self.formLayout_7.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_sterzhen)
        self.lineEdit_sterzhen = QtWidgets.QLineEdit(self.scrollAreaWidgetContents_15)
        self.lineEdit_sterzhen.setObjectName("lineEdit_sterzhen")
        self.formLayout_7.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.lineEdit_sterzhen)
        self.label_sila = QtWidgets.QLabel(self.scrollAreaWidgetContents_15)
        self.label_sila.setObjectName("label_sila")
        self.formLayout_7.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_sila)
        self.lineEdit_sila = QtWidgets.QLineEdit(self.scrollAreaWidgetContents_15)
        self.lineEdit_sila.setObjectName("lineEdit_sila")
        self.formLayout_7.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.lineEdit_sila)
        #self.check_Box_perpend = QtWidgets.QCheckBox(self.scrollAreaWidgetContents_15)
        #self.check_Box_perpend.setText("")
        #self.check_Box_perpend.setObjectName("check_Box_perpend")
        #self.formLayout_7.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.check_Box_perpend)
        #self.label_perpend = QtWidgets.QLabel(self.scrollAreaWidgetContents_15)
        #self.label_perpend.setObjectName("label_perpend")
        #self.formLayout_7.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.label_perpend)
        self.scroll_running.setWidget(self.scrollAreaWidgetContents_15)
        #self.scroll_concentrated = QtWidgets.QScrollArea(self.frame)
        #self.scroll_concentrated.setGeometry(QtCore.QRect(820, 50, 161, 231))
        #self.scroll_concentrated.setWidgetResizable(True)
        #self.scroll_concentrated.setObjectName("scroll_concentrated")
        #self.scrollAreaWidgetContents_16 = QtWidgets.QWidget()
        #self.scrollAreaWidgetContents_16.setGeometry(QtCore.QRect(0, 0, 159, 229))
        #self.scrollAreaWidgetContents_16.setObjectName("scrollAreaWidgetContents_16")
        #self.formLayout_8 = QtWidgets.QFormLayout(self.scrollAreaWidgetContents_16)
        #self.formLayout_8.setObjectName("formLayout_8")
        #self.label_8 = QtWidgets.QLabel(self.scrollAreaWidgetContents_16)
        #self.label_8.setStyleSheet("color:rgb(144, 144, 144)")
        #self.label_8.setObjectName("label_8")
        #self.formLayout_8.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_8)
        #self.label_point_2 = QtWidgets.QLabel(self.scrollAreaWidgetContents_16)
        #self.label_point_2.setObjectName("label_point_2")
        #self.formLayout_8.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_point_2)
        #self.label_sila_X = QtWidgets.QLabel(self.scrollAreaWidgetContents_16)
        #self.label_sila_X.setObjectName("label_sila_X")
        #self.formLayout_8.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_sila_X)
        #self.lineEdit_point_2= QtWidgets.QLineEdit(self.scrollAreaWidgetContents_16)
        #self.lineEdit_point_2.setObjectName("lineEdit_point_2")
        #self.formLayout_8.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.lineEdit_point_2)
        #self.lineEdit_power_X = QtWidgets.QLineEdit(self.scrollAreaWidgetContents_16)
        #self.lineEdit_power_X.setObjectName("lineEdit_power_X")
        #self.formLayout_8.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.lineEdit_power_X)
        #self.label_sila_Y = QtWidgets.QLabel(self.scrollAreaWidgetContents_16)
        #self.label_sila_Y.setObjectName("label_sila_Y")
        #self.formLayout_8.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.label_sila_Y)
        #self.lineEdit_sila_Y = QtWidgets.QLineEdit(self.scrollAreaWidgetContents_16)
        #self.lineEdit_sila_Y.setObjectName("lineEdit_sila_Y")
        #self.formLayout_8.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.lineEdit_sila_Y)
        #self.lineEdit_kruchenie = QtWidgets.QLineEdit(self.scrollAreaWidgetContents_16)
        #self.lineEdit_kruchenie.setText("")
        #self.lineEdit_kruchenie.setObjectName("checkBox")
        #self.formLayout_8.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.lineEdit_kruchenie)
        #self.label_kruchenie = QtWidgets.QLabel(self.scrollAreaWidgetContents_16)
        #self.label_kruchenie.setObjectName("label_kruchenie")
        #self.formLayout_8.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.label_kruchenie)
        #self.scroll_concentrated.setWidget(self.scrollAreaWidgetContents_16)
        self.horizontalLayout.addWidget(self.frame)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1426, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action_2 = QtWidgets.QAction(MainWindow)
        self.action_2.setObjectName("action_2")
        self.action_3 = QtWidgets.QAction(MainWindow)
        self.action_3.setObjectName("action_3")
        self.action_4 = QtWidgets.QAction(MainWindow)
        self.action_4.setObjectName("action_4")
        self.menu.addSeparator()
        self.menu.addAction(self.action_2)
        self.menu.addAction(self.action_3)
        self.menu.addAction(self.action_4)
        self.menubar.addAction(self.menu.menuAction())


        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.add_functions()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_X.setText(_translate("MainWindow", "L"))
        self.label_Y.setText(_translate("MainWindow", "A"))
        self.label_material.setText(_translate("MainWindow", "Матер."))
        self.label.setText(_translate("MainWindow", "1"))
        self.btn_add_point.setText(_translate("MainWindow", "Добавить"))
        self.pushButton_render.setText(_translate("MainWindow", "Рендер"))
        self.pushButton_graph_prod.setText(_translate("MainWindow", "График σ"))
        self.pushButton_graph_norm.setText(_translate("MainWindow", "График U"))
        self.pushButton_graph_peremesh.setText(_translate("MainWindow", "График N"))
        self.pushButton_table_peremesh.setText(_translate("MainWindow", "Табл. N"))
        self.pushButton_table_prod.setText(_translate("MainWindow", "Табл. σ"))
        self.pushButton_table_norm.setText(_translate("MainWindow", "Табл. U"))
        #self.btn_add_kernel.setText(_translate("MainWindow", "Добавить"))
        self.btn_add_type.setText(_translate("MainWindow", "Добавить"))
        self.btn_add_sealing.setText(_translate("MainWindow", "Добавить"))
        self.btn_add_running.setText(_translate("MainWindow", "Добавить"))
        #self.btn_add_concentrated.setText(_translate("MainWindow", "Добавить"))
        self.label_left_sealing.setText(_translate("MainWindow", "Заделка слева"))
        self.label_right_sealing.setText(_translate("MainWindow", "Заделка справа"))
        #self.label_Y_3.setText(_translate("MainWindow", "Конец"))
        self.label_2.setText(_translate("MainWindow", "1"))
        #self.label_X_4.setText(_translate("MainWindow", "A"))
        self.label_Y_4.setText(_translate("MainWindow", "E"))
        self.label_5.setText(_translate("MainWindow", "1"))
        self.label_9.setText(_translate("MainWindow", "σ"))
        self.label_kern.setText(_translate("MainWindow", "Стерж."))
        self.label_power.setText(_translate("MainWindow", "Сила"))
        self.label_6.setText(_translate("MainWindow", "1"))
        self.label_7.setText(_translate("MainWindow", "1"))
        self.label_sterzhen.setText(_translate("MainWindow", "Точка"))
        self.label_sila.setText(_translate("MainWindow", "Сила"))
        #self.label_perpend.setText(_translate("MainWindow", "Перп."))
        #self.label_8.setText(_translate("MainWindow", "1"))
        #self.label_point_2.setText(_translate("MainWindow", "Точка"))
        #self.label_sila_X.setText(_translate("MainWindow", "Сила X"))
        #self.label_sila_Y.setText(_translate("MainWindow", "Сила Y"))
        #self.label_kruchenie.setText(_translate("MainWindow", "Круч."))
        self.menu.setTitle(_translate("MainWindow", "Файл"))
        self.action_2.setText(_translate("MainWindow", "Открыть"))
        self.action_3.setText(_translate("MainWindow", "Сохранить"))
        self.action_4.setText(_translate("MainWindow", "Сохранить как..."))

    def create_objects_point(self):
        id = None
        x = None
        y = None
        for i in range(self.formLayout.count()):
            item = self.formLayout.itemAt(i, QtWidgets.QFormLayout.FieldRole)
            if item is not None:
                if (i-1)%3 == 0:
                   x = self.formLayout.itemAt(i, QtWidgets.QFormLayout.FieldRole).widget().text()
                if (i-2)%3 == 0:
                   y = self.formLayout.itemAt(i, QtWidgets.QFormLayout.FieldRole).widget().text()
                   id = (i+1)/3
                   if id not in (None, '', ' ') and x not in (None, '', ' ') and y not in (None, '', ' '):
                       created_point = point(id, x, y)
                       print('point', created_point.x, created_point.y)
    
    def create_objects_material(self):
        elasticity = None
        sigma = None
        for i in range(self.formLayout_5.count()):
            item = self.formLayout_5.itemAt(i, QtWidgets.QFormLayout.FieldRole)
            if item is not None:
                if (i-1)%3 == 0:
                    elasticity = self.formLayout_5.itemAt(i, QtWidgets.QFormLayout.FieldRole).widget().text()
                if (i-2)%3 == 0:
                    id = (i+1)/3
                    sigma = self.formLayout_5.itemAt(i, QtWidgets.QFormLayout.FieldRole).widget().text()
                    print('data', elasticity, sigma)
                    if elasticity not in (None, '', ' ') and sigma not in (None, '', ' '):
                        created_material = material(id, elasticity, sigma)
                        print('material', '(',
                              created_material.elasticity, created_material.sigma, ')' )


    def create_objects_kernel(self):
        id = None
        length = None
        area = None
        _material = None
        for i in range(self.formLayout.count()):
            item = self.formLayout.itemAt(i, QtWidgets.QFormLayout.FieldRole)
            if item is not None:
                if (i-1)%4 == 0:
                   length = self.formLayout.itemAt(i, QtWidgets.QFormLayout.FieldRole).widget().text()
                if (i-2)%4 == 0:
                   area = self.formLayout.itemAt(i, QtWidgets.QFormLayout.FieldRole).widget().text()
                if (i-3)%4 == 0:
                   _material = self.formLayout.itemAt(i, QtWidgets.QFormLayout.FieldRole).widget().text()
                   id = (i+1)/4
                   if id not in (None, '', ' ') and length not in (None, '', ' ') and _material not in (None, '', ' '):
                       created_kernel = kernel(id, length, area, _material)
                       print('kernel', created_kernel.id, created_kernel.length, created_kernel.area, created_kernel.material)

    def create_objects_concentrated(self):
        point = None
        power = None
        for i in range(self.formLayout_7.count()):
            item = self.formLayout_7.itemAt(i, QtWidgets.QFormLayout.FieldRole)
            if item is not None:
                if (i-1)%3 == 0:
                    if self.formLayout_7.itemAt(i, QtWidgets.QFormLayout.FieldRole).widget().text().isdigit():
                        point = int(self.formLayout_7.itemAt(i, QtWidgets.QFormLayout.FieldRole).widget().text())
                if (i-2)%3 == 0:
                   power = self.formLayout_7.itemAt(i, QtWidgets.QFormLayout.FieldRole).widget().text()
                   if point not in (None, '', ' ') and power not in (None, '', ' '):
                       created_concentrated = concentrated(point, power)
                       print('concentrated', '(', created_concentrated.point,
                             created_concentrated.power, ')' )

    def create_objects_running(self):
        _kernel = None
        power = None
        for i in range(self.formLayout_6.count()):
            item = self.formLayout_6.itemAt(i, QtWidgets.QFormLayout.FieldRole)
            if item is not None:
                if (i-1)%3 == 0:
                    if self.formLayout_6.itemAt(i, QtWidgets.QFormLayout.FieldRole).widget().text().isdigit():
                        _kernel = int(self.formLayout_6.itemAt(i, QtWidgets.QFormLayout.FieldRole).widget().text())
                if (i-2)%3 == 0:
                   power = self.formLayout_6.itemAt(i, QtWidgets.QFormLayout.FieldRole).widget().text()
                   if _kernel not in (None, '', ' ') and power not in (None, '', ' '):
                       created_running = running(_kernel, power)
                       print('running', '(', created_running.kernel, created_running.power)

    def create_sealings(self):
        if self.formLayout_4.itemAt(1, QtWidgets.QFormLayout.FieldRole).widget().isChecked():
            self.graphicsView.left_sealing = True
        else:
            self.graphicsView.left_sealing = False
        if self.formLayout_4.itemAt(2, QtWidgets.QFormLayout.FieldRole).widget().isChecked():
            self.graphicsView.right_sealing = True
        else:
            self.graphicsView.right_sealing = False

    def clear_all_objects(self):
        #point.objects = []
        kernel.objects = []
        running.objects = []
        concentrated.objects = []

    def set_indent(self):
        x_min = sys.maxsize
        y_min = sys.maxsize
        for kern in kernel.objects:
            if kern.start.x < x_min:
                x_min = kern.start.x
            if kern.end.x < x_min:
                x_min = kern.end.x
            if kern.start.y < y_min:
                y_min = kern.start.y
            if kern.end.y < y_min:
                y_min = kern.end.y
        indent = (x_min, y_min)
        self.graphicsView.indent = indent
        print('indent', indent)
        return indent

    def set_scale(self):
        x_max = 0
        y_max = 0
        for kern in kernel.objects:
            if kern != None:
                if kern.area > y_max:
                    y_max = kern.area
                x_max += kern.length
        scale_x = 670/x_max if x_max != 0 else 1
        scale_y = 300/y_max if y_max != 0 else 1
        self.graphicsView.scale_x = scale_x
        self.graphicsView.scale_y = scale_y
        print(scale_x, scale_y)
        return scale_x, scale_y

    def grafikN(self, N, kernels):
        sumL = 0
        for kern in kernels:
            sumL += kern.L
        y = []
        for i in range(len(kernels)):
            x = np.linspace(0, kernels[i].L, int(round(500*kernels[i].L/sumL)))
            y += [N[i][0] + _x*N[i][1] for _x in x]
        x1 = np.linspace(0, sumL, len(y))
        plt.title("N(X)") # заголовок
        plt.xlabel("x")         # ось абсцисс
        plt.ylabel("y1, y2")    # ось ординат
        plt.grid()              # включение отображение сетки
        plt.plot(x1, y, 'r-')  # построение графика
        plt.show()

    def grafikU(self, U, kernels):
        sumL = 0
        for kern in kernels:
            sumL += kern.L
        y = []
        for i in range(len(kernels)):
            x = np.linspace(0, kernels[i].L, int(round(500*kernels[i].L/sumL)))
            y += [U[i][0] + _x*U[i][1]  + (_x**2) * U[i][2] for _x in x]
        x1 = np.linspace(0, sumL, len(y))
        plt.title("U(X)") # заголовок
        plt.xlabel("x")         # ось абсцисс
        plt.ylabel("y1, y2")    # ось ординат
        plt.grid()              # включение отображение сетки
        plt.plot(x1, y, 'r-')  # построение графика
        plt.show()

    def grafikSigma(self, N , kernels):
        sumL = 0
        for kern in kernels:
            sumL += kern.L
        y = []
        for i in range(len(kernels)):
            x = np.linspace(0, kernels[i].L, int(round(500*kernels[i].L/sumL)))
            y += [(N[i][0] + _x*N[i][1])/kernels[i].A for _x in x]
        x1 = np.linspace(0, sumL, len(y))
        plt.title("σ(X)") # заголовок
        plt.xlabel("x")         # ось абсцисс
        plt.ylabel("y1, y2")    # ось ординат
        plt.grid()              # включение отображение сетки
        plt.plot(x1, y, 'r-')  # построение графика
        plt.show()

    def  tableN(self, N, kernels):
        fig, ax = plt.subplots()

        #hide the axes
        fig.patch.set_visible(False)
        ax.axis('off')
        ax.axis('tight')

        #create data
        sumL = 0
        totable = []
        for i in range(len(kernels)):
            x = np.linspace(0, kernels[i].L, 10)
            for _x in x:
                totable.append([ round(_x+sumL,2) , round( N[i][0] + _x*N[i][1], 2) ])
            sumL += kernels[i].L
        df = pd.DataFrame(totable,
                          columns=['L', 'N'])

        #create table
        table = ax.table(cellText=df.values, colLabels=df.columns, loc='center')

        #display table
        fig.tight_layout()
        plt.show()

    def  tableSigma(self, N, kernels):
        fig, ax = plt.subplots()

        #hide the axes
        fig.patch.set_visible(False)
        ax.axis('off')
        ax.axis('tight')

        #create data
        sumL = 0
        totable = []
        for i in range(len(kernels)):
            x = np.linspace(0, kernels[i].L, 10)
            for _x in x:
                totable.append([ round(_x+sumL,2) , round( (N[i][0] + _x*N[i][1])/kernels[i].A, 2) ])
            sumL += kernels[i].L
        df = pd.DataFrame(totable,
                          columns=['L', 'σ'])

        #create table
        table = ax.table(cellText=df.values, colLabels=df.columns, loc='center')

        #display table
        fig.tight_layout()
        plt.show()

    def  tableU(self, U, kernels):
        fig, ax = plt.subplots()

        #hide the axes
        fig.patch.set_visible(False)
        ax.axis('off')
        ax.axis('tight')

        #create data
        sumL = 0
        totable = []
        for i in range(len(kernels)):
            x = np.linspace(0, kernels[i].L, 10)
            for _x in x:
                totable.append([ round(_x+sumL,2) , round( U[i][0] + _x*U[i][1] + (_x**2)*U[i][2], 2) ])
            sumL += kernels[i].L
        df = pd.DataFrame(totable,
                          columns=['L', 'U'])

        #create table
        table = ax.table(cellText=df.values, colLabels=df.columns, loc='center')

        #display table
        fig.tight_layout()
        plt.show()

    def displayAll(self, N, U, kernels, left, right, concentrateds):
        fig, ax = plt.subplots(figsize=(12, 6))

        #hide the axes
        fig.patch.set_visible(False)
        ax.axis('off')
        ax.axis('tight')

        df = pd.DataFrame(generateReactionsMatrix(kernels, left,
                                                 right) + [''] +['B'] +
                        [ [de] + ['']*len(kernels) for de in generateReactionsGlobalVector(kernels, concentrateds,left,right)] + [''] +
                        ['Δ'] + [ [de] + ['']*len(kernels) for de in generateDeltas(kernels, concentrateds,left,right)]
                          
                          
                          
                          , columns = ['A'] + ['']*len(kernels))

        #create table
        table = ax.table(cellText=df.values, colLabels=df.columns, loc='center')
        table.cellLoc = 'left'
        table.rowLoc = 'left'
        table.set_fontsize(14)
        #display table
        fig.tight_layout()
        plt.show()

    def render(self):
        self.clear_all_objects()
        self.create_sealings()
        #self.create_objects_point()
        self.create_objects_material()
        self.create_objects_running()
        self.create_objects_kernel()
        self.create_objects_concentrated()
        #self.set_indent()
        self.set_scale()
        self.graphicsView.update()
        #self.tableN(solveN(kernel.objects, concentrated.objects, self.graphicsView.left_sealing, self.graphicsView.right_sealing), kernel.objects)
        self.displayAll(solveN(kernel.objects, concentrated.objects, self.graphicsView.left_sealing, self.graphicsView.right_sealing),
                        solveU(kernel.objects, concentrated.objects, self.graphicsView.left_sealing, self.graphicsView.right_sealing),
                        kernel.objects, self.graphicsView.left_sealing, self.graphicsView.left_sealing, concentrated.objects)


    def add_form_point(self):
        label = QtWidgets.QLabel()
        label.setStyleSheet("color:rgb(144, 144, 144)")

        lineEdit_L = QtWidgets.QLineEdit()
        lineEdit_A = QtWidgets.QLineEdit()
        lineEdit_material = QtWidgets.QLineEdit()

        label_L = QtWidgets.QLabel()
        label_A = QtWidgets.QLabel()
        label_material = QtWidgets.QLabel()


        self.formLayout.addRow(label)
        self.formLayout.addRow(label_L, lineEdit_L)
        self.formLayout.addRow(label_A, lineEdit_A)
        self.formLayout.addRow(label_material, lineEdit_material)
        label_L.setText('L')
        label_A.setText('A')
        label_material.setText('Матер.')
        label.setText(f'{ int(((self.formLayout.count()) /7 ))}')

    def add_form_kernel(self):
        label = QtWidgets.QLabel()
        label.setStyleSheet("color:rgb(144, 144, 144)")

        lineEdit_type = QtWidgets.QLineEdit()
        lineEdit_nachalo = QtWidgets.QLineEdit()
        lineEdit_konets = QtWidgets.QLineEdit()

        label_left_sealing = QtWidgets.QLabel()
        label_nachalo = QtWidgets.QLabel()
        label_konets = QtWidgets.QLabel()

        self.formLayout_4.addRow(label)
        self.formLayout_4.addRow(label_left_sealing, lineEdit_type)
        self.formLayout_4.addRow(label_nachalo, lineEdit_nachalo)
        self.formLayout_4.addRow(label_konets, lineEdit_konets)
        label_left_sealing.setText('Тип')
        label_nachalo.setText('Нач.')
        label_konets.setText('Конец')
        label.setText(f'{ int(((self.formLayout_4.count()) /7 ))}')

    def add_form_type(self):
        label = QtWidgets.QLabel()
        label.setStyleSheet("color:rgb(144, 144, 144)")
        lineEdit_E = QtWidgets.QLineEdit()
        lineEdit_sigma = QtWidgets.QLineEdit()

        label_E = QtWidgets.QLabel()
        label_sigma = QtWidgets.QLabel()

        self.formLayout_5.addRow(label)
        self.formLayout_5.addRow(label_E, lineEdit_E)
        self.formLayout_5.addRow(label_sigma, lineEdit_sigma)
        label_E.setText('E')
        label_sigma.setText('σ')
        label.setText(f'{ int(((self.formLayout_5.count()) /7 ))}')

    def add_form_sealing(self):
        label = QtWidgets.QLabel()
        label.setStyleSheet("color:rgb(144, 144, 144)")
        label.setObjectName("label")

        lineEdit_kern = QtWidgets.QLineEdit()
        lineEdit_power = QtWidgets.QLineEdit()


        label_kern= QtWidgets.QLabel()
        label_power = QtWidgets.QLabel()

  
        self.formLayout_6.addRow(label)
        self.formLayout_6.addRow(label_kern, lineEdit_kern)
        self.formLayout_6.addRow(label_power, lineEdit_power)
        label_kern.setText('Стерж.')
        label_power.setText('Сила')
        label.setText(f'{ int(((self.formLayout_6.count()) /5 ))}')

    def add_form_running(self):
        label = QtWidgets.QLabel()
        label.setStyleSheet("color:rgb(144, 144, 144)")
        label.setObjectName("label")

        lineEdit_kernel = QtWidgets.QLineEdit()
        lineEdit_power = QtWidgets.QLineEdit()



        label_kernel = QtWidgets.QLabel()
        label_power = QtWidgets.QLabel()


  
        self.formLayout_7.addRow(label)
        self.formLayout_7.addRow(label_kernel, lineEdit_kernel)
        self.formLayout_7.addRow(label_power, lineEdit_power)
        label_kernel.setText('Точка')
        label_power.setText('Сила')
        label.setText(f'{ int(((self.formLayout_7.count()) /7 ))}')

    def add_form_concentrated(self):
        label = QtWidgets.QLabel()
        label.setStyleSheet("color:rgb(144, 144, 144)")
        label.setObjectName("label")

        lineEdit_point_2 = QtWidgets.QLineEdit()
        lineEdit_power_X = QtWidgets.QLineEdit()
        lineEdit_power_Y = QtWidgets.QLineEdit()

        lineEdit_torsion = QtWidgets.QLineEdit()


        label_point_2 = QtWidgets.QLabel()
        label_power_X = QtWidgets.QLabel()
        label_power_Y = QtWidgets.QLabel()
        label_torsion = QtWidgets.QLabel()


  
        self.formLayout_8.addRow(label)
        self.formLayout_8.addRow(label_point_2, lineEdit_point_2)
        self.formLayout_8.addRow(label_power_X, lineEdit_power_X)
        self.formLayout_8.addRow(label_power_Y, lineEdit_power_Y)
        self.formLayout_8.addRow(label_torsion, lineEdit_torsion)
        label_point_2.setText('Точка')
        label_power_X.setText('Сила X')
        label_power_Y.setText('Сила Y')
        label_torsion.setText('Круч.')
        label.setText(f'{ int(((self.formLayout_8.count()) /9 ))}')

    def add_functions(self):
        self.btn_add_point.clicked.connect(self.add_form_point)
        #self.btn_add_kernel.clicked.connect(self.add_form_kernel)
        self.btn_add_type.clicked.connect(self.add_form_type)
        self.btn_add_sealing.clicked.connect(self.add_form_sealing)
        self.btn_add_running.clicked.connect(self.add_form_running)
        #self.btn_add_concentrated.clicked.connect(self.add_form_concentrated)
        self.pushButton_render.clicked.connect(self.render)
        self.action_2.triggered.connect(self.open_file)
        self.action_4.triggered.connect(self.save_as)
        self.pushButton_graph_prod.clicked.connect(lambda: self.grafikSigma(solveN(kernel.objects, concentrated.objects, self.graphicsView.left_sealing, self.graphicsView.right_sealing), kernel.objects))
        self.pushButton_graph_norm.clicked.connect(lambda: self.grafikU(solveU(kernel.objects, concentrated.objects, self.graphicsView.left_sealing, self.graphicsView.right_sealing), kernel.objects))
        self.pushButton_graph_peremesh.clicked.connect(lambda: self.grafikN(solveN(kernel.objects, concentrated.objects, self.graphicsView.left_sealing, self.graphicsView.right_sealing), kernel.objects))
        self.pushButton_table_peremesh.clicked.connect(lambda: self.tableN(solveN(kernel.objects, concentrated.objects, self.graphicsView.left_sealing, self.graphicsView.right_sealing), kernel.objects))
        self.pushButton_table_prod.clicked.connect(lambda: self.tableSigma(solveN(kernel.objects, concentrated.objects, self.graphicsView.left_sealing, self.graphicsView.right_sealing), kernel.objects))
        self.pushButton_table_norm.clicked.connect(lambda: self.tableU(solveU(kernel.objects, concentrated.objects, self.graphicsView.left_sealing, self.graphicsView.right_sealing), kernel.objects))
        
    def open_file(self):
        fname = QFileDialog.getOpenFileName(self.graphicsView, 'Open file')
        if fname[0] != '':
            pickle_in = open(fname[0], 'rb')
            all = pickle.load(pickle_in)
            print(all)

            #kernels
            while self.formLayout.rowCount() != 0:
                self.formLayout.removeRow(0)
            for kern in all['kernels']:
                label = QtWidgets.QLabel()
                label.setStyleSheet("color:rgb(144, 144, 144)")

                lineEdit_L = QtWidgets.QLineEdit()
                lineEdit_A = QtWidgets.QLineEdit()
                lineEdit_material = QtWidgets.QLineEdit()

                lineEdit_L.insert(str(kern.length))
                lineEdit_A.insert(str(kern.area))
                lineEdit_material.insert(str(kern.material))


                label_L = QtWidgets.QLabel()
                label_A = QtWidgets.QLabel()
                label_material = QtWidgets.QLabel()


                self.formLayout.addRow(label)
                self.formLayout.addRow(label_L, lineEdit_L)
                self.formLayout.addRow(label_A, lineEdit_A)
                self.formLayout.addRow(label_material, lineEdit_material)
                label_L.setText('L')
                label_A.setText('A')
                label_material.setText('Матер.')
                label.setText(f'{ int(((self.formLayout.count()) /7 ))}')

            #sealings
                if all['sealings'][0] == True:
                    self.formLayout_4.itemAt(1, QtWidgets.QFormLayout.FieldRole).widget().setCheckState(2)
                if all['sealings'][1] == True:
                    self.formLayout_4.itemAt(2, QtWidgets.QFormLayout.FieldRole).widget().setCheckState(2)

            #materials
                while self.formLayout_5.rowCount() != 0:
                    self.formLayout_5.removeRow(0)
                for mat in all['materials']:
                    label = QtWidgets.QLabel()
                    label.setStyleSheet("color:rgb(144, 144, 144)")
                    lineEdit_E = QtWidgets.QLineEdit()
                    lineEdit_sigma = QtWidgets.QLineEdit()

                    label_E = QtWidgets.QLabel()
                    label_sigma = QtWidgets.QLabel()

                    lineEdit_E.insert(str(mat.elasticity))
                    lineEdit_sigma.insert(str(mat.sigma))


                    self.formLayout_5.addRow(label)
                    self.formLayout_5.addRow(label_E, lineEdit_E)
                    self.formLayout_5.addRow(label_sigma, lineEdit_sigma)
                    label_E.setText('E')
                    label_sigma.setText('σ')
                    label.setText(f'{ int(((self.formLayout_5.count()) /5 ))}')

            #running
                while self.formLayout_6.rowCount() != 0:
                    self.formLayout_6.removeRow(0)
                for power in all['running']:
                    label = QtWidgets.QLabel()
                    label.setStyleSheet("color:rgb(144, 144, 144)")
                    label.setObjectName("label")

                    lineEdit_kern = QtWidgets.QLineEdit()
                    lineEdit_power = QtWidgets.QLineEdit()


                    label_kern= QtWidgets.QLabel()
                    label_power = QtWidgets.QLabel()

                       
                    lineEdit_kern.insert(str(power.kernel))
                    lineEdit_power.insert(str(power.power))

                    self.formLayout_6.addRow(label)
                    self.formLayout_6.addRow(label_kern, lineEdit_kern)
                    self.formLayout_6.addRow(label_power, lineEdit_power)
                    label_kern.setText('Стерж.')
                    label_power.setText('Сила')
                    label.setText(f'{ int(((self.formLayout_6.count()) /5 ))}')

            #concentrated
                while self.formLayout_7.rowCount() != 0:
                    self.formLayout_7.removeRow(0)
                for power in all['concentrated']:
                    label = QtWidgets.QLabel()
                    label.setStyleSheet("color:rgb(144, 144, 144)")
                    label.setObjectName("label")

                    lineEdit_point = QtWidgets.QLineEdit()
                    lineEdit_power = QtWidgets.QLineEdit()



                    label_point = QtWidgets.QLabel()
                    label_power = QtWidgets.QLabel()

                    lineEdit_point.insert(str(power.point))
                    lineEdit_power.insert(str(power.power))
  
                    self.formLayout_7.addRow(label)
                    self.formLayout_7.addRow(label_point, lineEdit_point)
                    self.formLayout_7.addRow(label_power, lineEdit_power)
                    label_point.setText('Точка')
                    label_power.setText('Сила')
                    label.setText(f'{ int(((self.formLayout_7.count()) /5 ))}')


    def save_as(self):
        fname = QFileDialog.getSaveFileName(self.graphicsView, 'Save file')
        print('fname ', fname)
        if fname[0] != '':
            pickle_out = open(fname[0], 'wb')
            all = {'kernels': kernel.objects, 'concentrated': concentrated.objects,
                  'running': running.objects, 'materials': material.objects, 'sealings': (self.graphicsView.left_sealing, self.graphicsView.right_sealing)}
            print('all', all)
            pickle.dump(all, pickle_out)
            pickle_out.close()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
